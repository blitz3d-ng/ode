/**
@page introduction About ODE

@section license ODE's License

ODE is Copyright &copy; 2001-2004 Russell L. Smith. All rights reserved.

This library is free software; you can redistribute it and/or modify it under 
the terms of EITHER:

   1. The GNU Lesser General Public License as published by the Free Software Foundation; either version 2.1 of the License, or (at your option) any later version. The text of the GNU Lesser General Public License is included with this library in the file LICENSE.TXT.
   2. The BSD-style license that is included with this library in the file LICENSE-BSD.TXT. 

This library is distributed in the hope that it will be useful, but WITHOUT ANY 
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A 
PARTICULAR PURPOSE. See the files LICENSE.TXT and LICENSE-BSD.TXT for more details.


@section features Features

ODE is good for simulating articulated rigid body structures. An articulated
structure is created when rigid bodies of various shapes are connected 
together with joints of various kinds. Examples are ground vehicles (where 
the wheels are connected to the chassis), legged creatures (where the legs 
are connected to the body), or stacks of objects.

ODE is designed to be used in interactive or real-time simulation. It is 
particularly good for simulating moving objects in changeable virtual reality 
environments. This is because it is fast, robust and stable, and the user has 
complete freedom to change the structure of the system even while the 
simulation is running.

ODE uses a highly stable integrator, so that the simulation errors should not 
grow out of control. The physical meaning of this is that the simulated system 
should not "explode" for no reason (believe me, this happens a lot with other 
simulators if you are not careful). ODE emphasizes speed and stability over 
physical accuracy.

ODE has hard contacts. This means that a special non-penetration constraint is 
used whenever two bodies collide. The alternative, used in many other simulators, 
is to use virtual springs to represent contacts. This is difficult to do right 
and extremely error-prone.

ODE has a built-in collision detection system. However you can ignore it and do 
your own collision detection if you want to. The current collision primitives are 
sphere, box, capped cylinder, plane, ray, and triangular mesh - more collision 
objects will come later. ODE's collision system provides fast identification of 
potentially intersecting objects, through the concept of "spaces".

Here are the features:
@li Rigid bodies with arbitrary mass distribution.
@li Joint types: ball-and-socket, hinge, slider (prismatic), hinge-2, fixed, angular motor, universal.
@li Collision primitives: sphere, box, capped cylinder, plane, ray, and triangular mesh.
@li Collision spaces: Quad tree, hash space, and simple.
@li Simulation method: The equations of motion are derived from a Lagrange multiplier velocity based model due to Trinkle/Stewart and Anitescu/Potra.
@li A first order integrator is being used. It's fast, but not accurate enough for quantitative engineering yet. Higher order integrators will come later.
@li Choice of time stepping methods: either the standard ``big matrix'' method or the newer iterative QuickStep method can be used.
@li Contact and friction model: This is based on the Dantzig LCP solver described by Baraff, although ODE implements a faster approximation to the Coloumb friction model.
@li Has a native C interface (even though ODE is mostly written in C++).
@li Has a C++ interface built on top of the C one.
@li Many unit tests, and more being written all the time.
@li Platform specific optimizations.
@li Other stuff I forgot to mention... 


@section community The ODE Community

Do you have questions or comments about ODE? Think you can help? Please write to 
<a href="http://q12.org/mailman/listinfo/ode">the ODE mailing list</a>.

*/

