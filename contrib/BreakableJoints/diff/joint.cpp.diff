2273a2274,2369
> 
> /******************** breakable joint contribution ***********************/
> extern "C" void dJointSetBreakable (dxJoint *joint, int b) {
> 	if (b) {
> 		// we want this joint to be breakable but we must first check if it
> 		// was already breakable
> 		if (!joint->breakInfo) {
> 			// allocate a dxJointBreakInfo struct
> 			joint->breakInfo = new dxJointBreakInfo;
> 			joint->breakInfo->flags = 0;
> 			joint->breakInfo->broken = 0;
> 			joint->breakInfo->breakForce = 0;
> 			joint->breakInfo->breakTorque = 0;
> 		}
> 		else {
> 			// the joint was already breakable
> 			return;
> 		}
> 	}
> 	else {
> 		// we want this joint to be unbreakable mut we must first check if
> 		// it is alreay unbreakable
> 		if (joint->breakInfo) {
> 			// deallocate the dxJointBreakInfo struct
> 			delete joint->breakInfo;
> 			joint->breakInfo = 0;
> 		}
> 		else {
> 			// the joint was already unbreakable
> 			return;
> 		}
> 	}
> }
> 
> extern "C" int dJointIsBreakable (dxJoint *joint) {
> 	return joint->breakInfo != 0;
> }
> 
> extern "C" void dJointSetBreakMode (dxJoint *joint, int mode) {
> 	// only works for a breakable joint
> 	if (!joint->breakInfo) {
> 		dDebug (0, "dJointSetBreakMode called on unbreakable joint");
> 		return;
> 	}
> 	joint->breakInfo->flags = mode;
> }
> 
> extern "C" void dJointSetBreakForce (dxJoint *joint, dReal force) {
> 	// only works for a breakable joint
> 	if (!joint->breakInfo) {
> 		dDebug (0, "dJointSetBreakForce called on unbreakable joint");
> 		return;
> 	}
> 	joint->breakInfo->breakForce = force*force;
> }
> 
> extern "C" void dJointSetBreakTorque (dxJoint *joint, dReal torque) {
> 	// only works for a breakable joint
> 	if (!joint->breakInfo) {
> 		dDebug (0, "dJointSetBreakTorque called on unbreakable joint");
> 		return;
> 	}
> 	joint->breakInfo->breakTorque = torque*torque;
> }
> 
> extern "C" int dJointGetBreakMode (dxJoint *joint) {
> 	// only works for a breakable joint
> 	if (!joint->breakInfo) {
> 		dDebug (0, "dJointGetBreakMode called on unbreakable joint");
> 		return 0;
> 	}
> 	return joint->breakInfo->flags;
> }
> 
> extern "C" dReal dJointGetBreakForce (dxJoint *joint) {
> 	// only works for a breakable joint
> 	if (!joint->breakInfo) {
> 		dDebug (0, "dJointGetBreakForce called on unbreakable joint");
> 		return 0;
> 	}
> 
> 	// we need to do a square root because the force is stored squared
> 	return dSqrt(joint->breakInfo->breakForce);
> }
> 
> extern "C" dReal dJointGetBreakTorque (dxJoint *joint) {
> 	// only works for a breakable joint
> 	if (!joint->breakInfo) {
> 		dDebug (0, "dJointGetBreakTorque called on unbreakable joint");
> 		return 0;
> 	}
> 
> 	// we need to do a square root because the torque is stored squared
> 	return dSqrt(joint->breakInfo->breakTorque);
> }
> /*************************************************************************/
