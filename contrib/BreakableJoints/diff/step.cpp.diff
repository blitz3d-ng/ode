963,988c963,1037
< 
<       if (fb) {
< 	// the user has requested feedback on the amount of force that this
< 	// joint is applying to the bodies. we use a slightly slower
< 	// computation that splits out the force components and puts them
< 	// in the feedback structure.
< 	dReal data1[8],data2[8];
< 	Multiply1_8q1 (data1, JJ, lambda+ofs[i], info[i].m);
< 	dReal *cf1 = cforce + 8*b1->tag;
< 	cf1[0] += (fb->f1[0] = data1[0]);
< 	cf1[1] += (fb->f1[1] = data1[1]);
< 	cf1[2] += (fb->f1[2] = data1[2]);
< 	cf1[4] += (fb->t1[0] = data1[4]);
< 	cf1[5] += (fb->t1[1] = data1[5]);
< 	cf1[6] += (fb->t1[2] = data1[6]);
< 	if (b2){
< 	  Multiply1_8q1 (data2, JJ + 8*info[i].m, lambda+ofs[i], info[i].m);
< 	  dReal *cf2 = cforce + 8*b2->tag;
< 	  cf2[0] += (fb->f2[0] = data2[0]);
< 	  cf2[1] += (fb->f2[1] = data2[1]);
< 	  cf2[2] += (fb->f2[2] = data2[2]);
< 	  cf2[4] += (fb->t2[0] = data2[4]);
< 	  cf2[5] += (fb->t2[1] = data2[5]);
< 	  cf2[6] += (fb->t2[2] = data2[6]);
< 	}
<       }
---
> /******************** breakable joint contribution ***********************/
> 	// we need joint feedback if the joint is breakable or if the user
> 	// requested feedback.
> 	if (joint[i]->breakInfo || fb) {
> 	  // we need feedback on the amount of force that this joint is
> 	  // applying to the bodies. we use a slightly slower computation
> 	  // that splits out the force components and puts them in the
> 	  // feedback structure.
>       dJointFeedback temp_fb; // temporary storage for joint feedback
> 	  dReal data1[8],data2[8];
> 	  Multiply1_8q1 (data1, JJ, lambda+ofs[i], info[i].m);
> 	  dReal *cf1 = cforce + 8*b1->tag;
> 	  cf1[0] += (temp_fb.f1[0] = data1[0]);
> 	  cf1[1] += (temp_fb.f1[1] = data1[1]);
> 	  cf1[2] += (temp_fb.f1[2] = data1[2]);
> 	  cf1[4] += (temp_fb.t1[0] = data1[4]);
> 	  cf1[5] += (temp_fb.t1[1] = data1[5]);
> 	  cf1[6] += (temp_fb.t1[2] = data1[6]);
> 	  if (b2) {
> 	    Multiply1_8q1 (data2, JJ + 8*info[i].m, lambda+ofs[i], info[i].m);
> 	    dReal *cf2 = cforce + 8*b2->tag;
> 	    cf2[0] += (temp_fb.f2[0] = data2[0]);
> 	    cf2[1] += (temp_fb.f2[1] = data2[1]);
> 	    cf2[2] += (temp_fb.f2[2] = data2[2]);
> 	    cf2[4] += (temp_fb.t2[0] = data2[4]);
> 	    cf2[5] += (temp_fb.t2[1] = data2[5]);
> 	    cf2[6] += (temp_fb.t2[2] = data2[6]);
> 	  }
> 	  // if the user requested so we must copy the feedback information to
> 	  // the feedback struct that the user suplied.
> 	  if (fb) {
> 	    // copy temp_fb to fb
> 	    fb->f1[0] = temp_fb.f1[0];
> 	    fb->f1[1] = temp_fb.f1[1];
> 	    fb->f1[2] = temp_fb.f1[2];
> 	    fb->t1[0] = temp_fb.t1[0];
> 	    fb->t1[1] = temp_fb.t1[1];
> 	    fb->t1[2] = temp_fb.t1[2];
> 	    if (b2){
> 	      fb->f2[0] = temp_fb.f2[0];
> 	      fb->f2[1] = temp_fb.f2[1];
> 	      fb->f2[2] = temp_fb.f2[2];
> 	      fb->t2[0] = temp_fb.t2[0];
> 	      fb->t2[1] = temp_fb.t2[1];
> 	      fb->t2[2] = temp_fb.t2[2];
> 	    }
> 	  }
> 	  // if the joint is breakable we need to check the breaking conditions
> 	  if (joint[i]->breakInfo) {
>         dReal f1_sqr = temp_fb.f1[0]*temp_fb.f1[0] + temp_fb.f1[1]*temp_fb.f1[1] + temp_fb.f1[2]*temp_fb.f1[2];
>         dReal t1_sqr = temp_fb.t1[0]*temp_fb.t1[0] + temp_fb.t1[1]*temp_fb.t1[1] + temp_fb.t1[2]*temp_fb.t1[2];
> 
> 		if (joint[i]->breakInfo->flags&dJOINT_BREAK_AT_FORCE && f1_sqr*stepsize>joint[i]->breakInfo->breakForce) {
> 			// flag the joint as broken
> 			joint[i]->breakInfo->broken = 1;
> 		}
> 		if (joint[i]->breakInfo->flags&dJOINT_BREAK_AT_TORQUE && t1_sqr*stepsize>joint[i]->breakInfo->breakTorque) {
> 			// flag the joint as broken
> 			joint[i]->breakInfo->broken = 1;
> 		}
>         if (b2) {
>           dReal f2_sqr = temp_fb.f2[0]*temp_fb.f2[0] + temp_fb.f2[1]*temp_fb.f1[1] + temp_fb.f2[2]*temp_fb.f2[2];
> 	      dReal t2_sqr = temp_fb.t2[0]*temp_fb.t2[0] + temp_fb.t2[1]*temp_fb.t1[1] + temp_fb.t2[2]*temp_fb.t2[2];
> 	  		if (joint[i]->breakInfo->flags&dJOINT_BREAK_AT_FORCE && f2_sqr*stepsize>joint[i]->breakInfo->breakForce) {
> 				// flag the joint as broken
> 				joint[i]->breakInfo->broken = 1;
> 			}
> 			if (joint[i]->breakInfo->flags&dJOINT_BREAK_AT_TORQUE && t2_sqr*stepsize>joint[i]->breakInfo->breakTorque) {
> 				// flag the joint as broken
> 				joint[i]->breakInfo->broken = 1;
> 			}
> 	    }
> 	  }
>     }
> /*************************************************************************/
999a1049,1050
> 
> 
