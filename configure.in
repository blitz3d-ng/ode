dnl Initial configure.in by Rodrigo Hernandez
dnl Modified in 26/10/2005 by Rodrigo Hernandez
dnl Modified in 19/11/2007 by Rodrigo Hernandez

dnl AC_INIT does not take a macro as a version nr: set it separately! - Bram
AC_INIT(ODE,0.9.0,ode@ode.org)

dnl When upgrading version nr, also change the AC_INIT line! - Bram
ODE_CURRENT=0
ODE_REVISION=9
ODE_AGE=0
ODE_RELEASE=[$ODE_CURRENT].[$ODE_REVISION].[$ODE_AGE]
dnl Libtool release is an interface id, 
dnl don't change unless the ode API is no longer backward compatible
LIBTOOL_RELEASE=0
AC_CANONICAL_HOST
AC_CANONICAL_TARGET

AM_INIT_AUTOMAKE(1.10 foreign)
AM_CONFIG_HEADER(ode/src/config.h)
AC_C_BIGENDIAN
AC_PATH_X
AC_PATH_XTRA


AC_LIBTOOL_WIN32_DLL
AC_PROG_LIBTOOL
AC_SUBST(LIBTOOL_DEPS)
AC_SUBST(LIBTOOL)

AC_SUBST(ODE_CURRENT)
AC_SUBST(ODE_REVISION)
AC_SUBST(ODE_AGE)
AC_SUBST(ODE_RELEASE)
AC_SUBST(ODE_SONAME)
AC_SUBST(LIBTOOL_RELEASE)

dnl This is needed because we have subdirectories
AC_PROG_MAKE_SET

AC_PROG_CXX
AC_PROG_INSTALL
AC_CHECK_TOOLS([WINDRES], [windres])
AC_C_CONST 
AC_C_INLINE
AC_C_VOLATILE
AC_HEADER_STDBOOL
AC_TYPE_SIZE_T

dnl Check if we want to build demos
AC_MSG_CHECKING(if tests should be built)
AC_ARG_ENABLE(demos,AC_HELP_STRING([--enable-demos], [build tests]), enable_demos=$enableval,enable_demos=yes)
AC_MSG_RESULT($enable_demos)
AM_CONDITIONAL(ENABLE_DEMOS, test x$enable_demos = xyes)

dnl Decide whether or not SSE is available
dnl Why dont we compile and run programs like we do to find out if
dnl this is a Pentium machine further down? simple!
dnl this may NOT be the machine on which the code is going to run in,
dnl so allow users to compile programs for their target machine.
case "$arch" in
  pentium3 | pentium4 | athlon* )
	AC_DEFINE(HAVE_SSE,,[Use SSE Optimizations])
    ;;
dnl this space available for other architectures specific extensions and/or
dnl other Intel based extensions such as 3DNow, SSE2, MMX, etc.
esac

dnl check for required headers
AC_CHECK_HEADERS( alloca.h ieeefp.h stdio.h stdlib.h math.h string.h stdarg.h malloc.h values.h float.h time.h sys/time.h )


opcode=no
gimpact=no
AC_ARG_WITH(trimesh,AC_HELP_STRING([--with-trimesh=[opcode|gimpact|none]],
[use the specified system for trimesh support.]),
trimesh=$withval,trimesh=opcode
)
if test "$trimesh" = opcode
then
  opcode=yes
fi
if test "$trimesh" = gimpact
then
  gimpact=yes
fi

AM_CONDITIONAL(OPCODE,  test $opcode  = yes)
AM_CONDITIONAL(GIMPACT, test $gimpact = yes)
AM_CONDITIONAL(TRIMESH, test $opcode = yes -o $gimpact = yes)


AC_MSG_CHECKING(if gyroscopic term should be used)
AC_ARG_ENABLE(gyroscopic,AC_HELP_STRING([--disable-gyroscopic],
[Configure ODE to work without gyroscopic term (may improve stability)]),
gyroscopic=$enableval,gyroscopic=yes)
AC_MSG_RESULT($gyroscopic)
if test x"$gyroscopic" = xyes
then
AC_DEFINE(dGYROSCOPIC,,[Use gyroscopic terms])
fi

dnl Define the dInfinity constant--------------------------/
if test "$build_os" == "$target_os"
then
AC_TRY_RUN([
#define dInfinity 1e20
int main()
{
if (dInfinity > 1e10 && -dInfinity < -1e10 && -dInfinity < dInfinity) 
return 0;
else return -1;
}
],dinfinity=1e20,,)
AC_TRY_RUN([
#define dInfinity 1.7976931348623157e+308
int main()
{
if (dInfinity > 1e10 && -dInfinity < -1e10 && -dInfinity < dInfinity) 
return 0;
else return -1;
}
],dinfinity=1.7976931348623157e+308,,)
AC_TRY_RUN([
#include <float.h>
#define dInfinity HUGE_VAL
int main()
{
if (dInfinity > 1e10 && -dInfinity < -1e10 && -dInfinity < dInfinity) 
return 0;
else return -1;
}
],dinfinity=HUGE_VAL,,)
AC_TRY_RUN([
#include <float.h>
#define dInfinity DBL_MAX
int main()
{
if (dInfinity > 1e10 && -dInfinity < -1e10 && -dInfinity < dInfinity) 
return 0;
else return -1;
}
],dinfinity=DBL_MAX,,)
else
#cross-compiling, use a reasonable value. We should add an option for setting this.
dinfinity=DBL_MAX
fi
AC_DEFINE_UNQUOTED(dDoubleInfinity,${dinfinity},[dDoubleInfinity Constant])
AC_MSG_CHECKING(for appropriate dDoubleInfinity constant)
AC_MSG_RESULT($dinfinity)

dnl SINGLE.
if test "$build_os" == "$target_os"
then
AC_TRY_RUN([
#define dInfinity 1e20f
int main()
{
if (dInfinity > 1e10f && -dInfinity < -1e10f && -dInfinity < dInfinity) 
return 0;
else return -1;
}
],dinfinity=1e20f,,)
AC_TRY_RUN([
#define dInfinity 3.402823466e+38F
int main()
{
if (dInfinity > 1e10f && -dInfinity < -1e10f && -dInfinity < dInfinity) 
return 0;
else return -1;
}
],dinfinity=3.402823466e+38F,,)
AC_TRY_RUN([
#include <float.h>
#define dInfinity HUGE_VALF
int main()
{
if (dInfinity > 1e10f && -dInfinity < -1e10f && -dInfinity < dInfinity) 
return 0;
else return -1;
}
],dinfinity=HUGE_VALF,,)
AC_TRY_RUN([
#include <float.h>
#define dInfinity FLT_MAX
int main()
{
if (dInfinity > 1e10f && -dInfinity < -1e10f && -dInfinity < dInfinity) 
return 0;
else return -1;
}
],dinfinity=FLT_MAX,,)
#cross-compiling, use a reasonable value. We should add an option for setting this.
dinfinity=FLT_MAX
fi
AC_DEFINE_UNQUOTED(dSingleInfinity,${dinfinity},[dSingleInfinity Constant])
AC_MSG_CHECKING(for appropriate dSingleInfinity constant)
AC_MSG_RESULT($dinfinity)
dnl --------------------------------------------------------------------------/

dnl Define dEpsilon
AC_CHECK_HEADER(float.h,[have_float_h=yes],[have_float_h=no])
AC_MSG_CHECKING(for appropriate dEpsilon constants)
if test "x$have_float_h" == xyes 
then
dDoubleEpsilon=DBL_EPSILON
dSingleEpsilon=FLT_EPSILON
else
dDoubleEpsilon=2.2204460492503131e-16
dSingleEpsilon=1.19209290e-07f
fi
AC_DEFINE_UNQUOTED(dSingleEpsilon,${dSingleEpsilon},[dSingleEpsilon Constant])
AC_DEFINE_UNQUOTED(dDoubleEpsilon,${dDoubleEpsilon},[dDoubleEpsilon Constant])
AC_MSG_RESULT([$dSingleEpsilon $dDoubleEpsilon])


dnl Check for PENTIUM
if test "$build_os" == "$target_os"
then
AC_MSG_CHECKING(for a Pentium CPU)
AC_TRY_RUN([
int main() 
{
asm ("mov \$0,%%eax;\n"
     "cpuid\n" : : : "%eax");
return 0;
};
],pentium=yes,pentium=no,)
else
pentium=no
fi
if test "x$pentium" == xyes 
then
AC_DEFINE(PENTIUM,1,[is this a pentium on a gcc-based platform?])
fi
AC_MSG_RESULT($pentium)

dnl Check for 64bit CPU
AC_MSG_CHECKING(for a x86-64 CPU)
if test "$build_os" == "$target_os"
then
AC_TRY_RUN([
int main()
{
int a = 0; 
int * pa = &a;
asm ("mov %0,%%rax\n"
     "movl (%%rax),%%eax\n"
     : : "r"(pa) : "%rax");
return 0;
};
],cpu64=yes,cpu64=no,)
else
cpu64=no
fi
if test "x$cpu64" == xyes 
then
AC_DEFINE(X86_64_SYSTEM,1,[is this a X86_64 system on a gcc-based platform?])
fi
AC_MSG_RESULT($cpu64)
AM_CONDITIONAL(X86_64_SYSTEM, test x$cpu64 = xyes)

dnl Check variable type sizes
AC_CHECK_SIZEOF(char)
AC_CHECK_SIZEOF(int)
AC_CHECK_SIZEOF(short)
AC_CHECK_SIZEOF(long int)
AC_CHECK_SIZEOF(void*)

dnl Set some Platform Specific Variables
EXTRA_LIBTOOL_LDFLAGS=
case "$host_os" in
  cygwin* | mingw*)
    so_ext=".dll"
    DLLDEFINE="-DODE_DLL"    
    drawstuff="Win32" # if in a Windows enviroment
    EXTRA_LIBTOOL_LDFLAGS="-no-undefined"
    ;;
  *apple* | *darwin*) # For Mac OS X
    so_ext=".dylib"
    DLLDEFINE=""
    SHARED_LDFLAGS="-dynamiclib"
    drawstuff="OSX"
    dnl We need to use C++ compilation and linking for ode on Mac
    dnl Might as well do it for all code.
    CC="$CXX"
    LINK="$CXXLINK"
    ;;
  *)
   drawstuff="X11" # if anything else default to X11
    if test x$use_soname = xyes; then
      so_ext=".so.$ODE_RELEASE"
    else
      so_ext=".so"
    fi
    DLLDEFINE=""
    SHARED_LDFLAGS="-shared"
    ;;
esac
AC_SUBST(EXTRA_LIBTOOL_LDFLAGS)
dnl Set Conditionals
AM_CONDITIONAL(WIN32, test x$drawstuff = xWin32)
AM_CONDITIONAL(X11, test x$drawstuff = xX11)
AM_CONDITIONAL(OSX, test x$drawstuff = xOSX)
dnl Set Drawstuff variables
AC_MSG_CHECKING(which drawstuff lib to build)
AC_MSG_RESULT($drawstuff)
AC_SUBST(DRAWSTUFF)
dnl Set shared library variables
AC_MSG_CHECKING(for the suffix of shared libraries)
AC_MSG_RESULT($so_ext)
AC_DEFINE_UNQUOTED(SO_EXT,"$so_ext",[The extension for shared libraries.])
AC_SUBST(so_ext)
AC_SUBST(SHARED_LDFLAGS)

dnl Check for AC_PATH_X variables
XINCLUDES=
XLIBRARIES=
if test "X$x_includes" != "XNONE" || "X$x_includes" != "X"; then
	XINCLUDES="-I$x_includes"
fi
if test "X$x_libraries" != "XNONE" || "X$x_libraries" != "X"; then
	XLIBRARIES="-L$x_libraries"
fi
AC_SUBST(XINCLUDES)
AC_SUBST(XLIBRARIES)

dnl Check for OpenGL
if test "x$drawstuff" = "xOSX"; then
  AC_DEFINE([HAVE_APPLE_OPENGL_FRAMEWORK], [1],
            [Use the Apple OpenGL framework.])
  GL_LIBS="-framework OpenGL -framework Carbon -framework AGL"
else
  AC_CHECK_HEADERS(GL/gl.h GL/glu.h GL/glext.h,,,
       [[#if HAVE_GL_GL_H
         #include <GL/gl.h>
         #endif
  	   #if HAVE_GL_GLU_H
         #include <GL/glu.h>
         #endif
       ]])
  AC_CHECK_LIB(GL, main,[GL_LIBS="$GL_LIBS -lGL"])
  TEMP_LDFLAGS="$LDFLAGS"
  LDFLAGS="$LDFLAGS $GL_LIBS"
  AC_CHECK_LIB(GLU, main,[GL_LIBS="$GL_LIBS -lGLU"])
  LDFLAGS="$TEMP_LDFLAGS"
  AC_CHECK_LIB(opengl32, main,[GL_LIBS="$GL_LIBS -lopengl32"])
  AC_CHECK_LIB(glu32, main,[GL_LIBS="$GL_LIBS -lglu32"])
fi
AC_SUBST(GL_LIBS)

dnl These libraries are checked for, but apparently not really needed
AC_CHECK_LIB(Xmu,main,[LIBXMU="-lXmu"],[LIBXMU=])
AC_SUBST(LIBXMU)
AC_CHECK_LIB(Xi,main,[LIBXI="-lXi"],[LIBXI=])
AC_SUBST(LIBXI)
AC_CHECK_LIB(X, main,[LIBX="-lX"],[LIBX=])
AC_SUBST(LIBX)
AC_CHECK_LIB(X11, main,[LIBX11="-lX11"],[LIBX11=])
AC_SUBST(LIBX11)

dnl Add some Windows libraries if found
AC_CHECK_LIB(gdi32,main,[LIBGDI32="-lgdi32"],[LIBGDI32=])
AC_SUBST(LIBGDI32)
AC_CHECK_LIB(winmm,main,[LIBWINMM="-lwinmm"],[LIBWINMM=])
AC_SUBST(LIBWINMM)

dnl stdc++ is required when linking C programs against ode
AC_CHECK_LIB(stdc++,main,[LIBSTDCXX="-lstdc++"],[LIBSTDCXX=])
AC_SUBST(LIBSTDCXX)
AC_CHECK_LIB(pthread,main,[LIBS="$LIBS -lpthread"])


dnl Check if the user wants to profile ODE using gprof
AC_MSG_CHECKING(for gprof)
AC_ARG_ENABLE([gprof],[AC_HELP_STRING([--enable-gprof],[enable profiling with gprof])],gprof=$enableval,gprof=no)
if test "$gprof" != no
then
    CFLAGS="-pg $CFLAGS"
    CPPFLAGS="-pg $CPPFLAGS"
    CXXFLAGS="-pg $CXXFLAGS"
    AC_CHECK_LIB(gmon, main,[LIBS="$LIBS -lgmon"])
    AC_MSG_RESULT(enabled)
else
    AC_MSG_RESULT(no)
fi

dnl Check for autoscan sugested functions
AC_CHECK_FUNCS([floor memmove memset select sqrt sqrtf sinf cosf fabsf atan2f fmodf copysignf copysign snprintf vsnprintf gettimeofday isnan isnanf _isnan _isnanf __isnan __isnanf])
if test "$build_os" == "$target_os"
then
AC_FUNC_ALLOCA 
AC_FUNC_MALLOC
AC_FUNC_OBSTACK 
AC_FUNC_REALLOC
AC_FUNC_SELECT_ARGTYPES
AC_FUNC_VPRINTF
fi

dnl include found system headers into config.h
AH_TOP([
#ifndef ODE_CONFIG_H
#define ODE_CONFIG_H
])
AH_BOTTOM([

#ifdef HAVE_ALLOCA_H
#include <alloca.h>
#endif
#if defined(HAVE_IEEEFP_H) && !defined(__CYGWIN__)
// This header creates conflicts with math.h in Cygwin.
#include <ieeefp.h>
#endif
#ifdef HAVE_STDIO_H
#include <stdio.h>
#endif
#ifdef HAVE_STDLIB_H
#include <stdlib.h>
#endif
#ifdef HAVE_MATH_H
#include <math.h>
#endif
#ifdef HAVE_STRING_H
#include <string.h>
#endif
#ifdef HAVE_STDARG_H
#include <stdarg.h>
#endif
#ifdef HAVE_MALLOC_H
#include <malloc.h>
#endif
#ifdef HAVE_VALUES_H
#include <values.h>
#endif
#ifdef HAVE_FLOAT_H
#include <float.h>
#endif
#if 0
/* REMOVED BECAUSE THESE ARE SET IN odeconfig.h */
#if SIZEOF_CHAR == 1
typedef char int8;
typedef unsigned char uint8;
#else
#error "expecting sizeof(char) == 1"
#endif
#if SIZEOF_SHORT == 2
typedef short int16;
typedef unsigned short uint16;
#else
#error "can not find 2 byte integer type"
#endif
/* integer types (we assume int >= 32 bits) */
#if SIZEOF_INT == 4
typedef short int32;
typedef unsigned short uint32;
#else
#error "can not find 4 byte integer type"
#endif
/* 
Handle Windows DLL odities
Its easier to export all symbols using the -shared flag
for MinGW than differentiating with declspec,
so only do it for MSVC
*/
#if defined(ODE_DLL) && defined(WIN32) && defined(_MSC_VER)
#define ODE_API __declspec( dllexport )
#elif !defined(ODE_DLL) && defined(WIN32) && defined(MSC_VER)
#define ODE_API __declspec( dllimport )
#else
#define ODE_API
#endif

#endif /* END OF REMOVED BECAUSE THESE ARE SET IN odeconfig.h */
/* an integer type that we can safely cast a pointer to and
 * from without loss of bits.
 */
#if SIZEOF_SHORT == SIZEOF_VOIDP
typedef unsigned short intP;
#elif SIZEOF_INT == SIZEOF_VOIDP
typedef unsigned int intP;
#elif SIZEOF_LONG_INT == SIZEOF_VOIDP
typedef unsigned long int intP;
#endif
#ifndef dDOUBLE
#define dInfinity dSingleInfinity
#define dEpsilon  dSingleEpsilon
#else
#define dInfinity dDoubleInfinity
#define dEpsilon  dDoubleEpsilon
#endif
#endif /* #define ODE_CONFIG_H */
])


dnl Finally write our Makefiles
AC_OUTPUT([
 Makefile
 include/Makefile
 include/ode/Makefile
 include/drawstuff/Makefile
 ode/Makefile
 ode/src/Makefile
 drawstuff/Makefile
 drawstuff/src/Makefile
 drawstuff/dstest/Makefile
 ode/demo/Makefile
 OPCODE/Makefile
 OPCODE/Ice/Makefile
 GIMPACT/Makefile
 GIMPACT/include/Makefile
 GIMPACT/include/GIMPACT/Makefile
 GIMPACT/src/Makefile
 ode-config
 ])

chmod +x ode-config

dnl Print some useful information
echo "Configuration:"
echo "  Target system type:      $target"
echo "  Build  system type:      $build"
echo "  Host   system type:      $host"
echo "  Use OPCODE:              $opcode"
echo "  Use GIMPACT:             $gimpact"
echo "  Use gyroscopic term:     $gyroscopic"
echo "  Is this a Pentium:       $pentium"
echo "  Is the CPU x86-64:       $cpu64"
echo "  Headers will be installed in $prefix/include/ode"
echo "  Libraries will be installed in $prefix/lib"
if test $gimpact = yes
then
  echo "WARNING! Double precision not yet supported for GIMPACT"
  echo "WARNING! Avoid using the generated double precision library"
fi



