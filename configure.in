dnl Initial configure.in by Rodrigo Hernandez
dnl Modified in 26/10/2005 by Rodrigo Hernandez
dnl Modified in 19/11/2007 by Rodrigo Hernandez

dnl AC_INIT does not take a macro as a version nr: set it separately! - Bram
AC_INIT(ODE,0.9.0,ode@ode.org)

dnl When upgrading version nr, also change the AC_INIT line! - Bram
ODE_CURRENT=0
ODE_REVISION=9
ODE_AGE=0
ODE_RELEASE=[$ODE_CURRENT].[$ODE_REVISION].[$ODE_AGE]
dnl Libtool release is an interface id, 
dnl don't change unless the ode API is no longer backward compatible
LIBTOOL_RELEASE=0
AC_CANONICAL_HOST

AM_INIT_AUTOMAKE(1.10 foreign)
AC_CONFIG_HEADER(ode/src/config.h)

dnl This is needed because we have subdirectories
AC_PROG_MAKE_SET
AC_PROG_CXX
AC_PROG_CC
AM_PROG_CC_C_O
AC_PROG_CPP
AC_PROG_AWK
AC_PROG_INSTALL
AC_PROG_LN_S
AC_PROG_MKDIR_P
AC_LIBTOOL_WIN32_DLL
AC_PROG_LIBTOOL
AC_CHECK_TOOLS([WINDRES], [windres])

AC_SUBST(LIBTOOL_DEPS)
AC_SUBST(LIBTOOL)

AC_SUBST(ODE_CURRENT)
AC_SUBST(ODE_REVISION)
AC_SUBST(ODE_AGE)
AC_SUBST(ODE_RELEASE)
AC_SUBST(ODE_SONAME)
AC_SUBST(LIBTOOL_RELEASE)



AC_C_BIGENDIAN
AC_C_INLINE
AC_C_VOLATILE
AC_HEADER_STDBOOL
AC_TYPE_SIZE_T

dnl Check if we want to build demos
AC_MSG_CHECKING(if demos should be built)
AC_ARG_ENABLE(demos,AC_HELP_STRING([--enable-demos], [build demos]), enable_demos=$enableval,enable_demos=yes)
AC_MSG_RESULT($enable_demos)



dnl this may NOT be the machine on which the code is going to run in,
dnl so allow users to compile programs for their target machine.
pentium=no
cpu64=no
case "$host_cpu" in
  i586 | i686 | i786 )
        pentium=yes
        AC_DEFINE(PENTIUM,1,[compiling for a pentium on a gcc-based platform?])
    ;;
  x86_64* )
        pentium=yes
        cpu64=yes
        AC_DEFINE(X86_64_SYSTEM,1,[compiling for a X86_64 system on a gcc-based platform?])
    ;;
esac

AM_CONDITIONAL(X86_64_SYSTEM, test x$cpu64 = xyes)






dnl check for required headers
AC_CHECK_HEADERS( alloca.h stdio.h stdint.h stdlib.h math.h string.h stdarg.h malloc.h float.h time.h sys/time.h )


opcode=no
gimpact=no
AC_ARG_WITH(trimesh,AC_HELP_STRING([--with-trimesh=[opcode|gimpact|none]],
[use the specified system for trimesh support.]),
trimesh=$withval,trimesh=opcode
)
if test "$trimesh" = opcode
then
  opcode=yes
fi
if test "$trimesh" = gimpact
then
  gimpact=yes
fi

AM_CONDITIONAL(OPCODE,  test $opcode  = yes)
AM_CONDITIONAL(GIMPACT, test $gimpact = yes)
AM_CONDITIONAL(TRIMESH, test $opcode = yes -o $gimpact = yes)


AC_MSG_CHECKING(if double precision is requested)
AC_ARG_ENABLE(double-precision,
        AC_HELP_STRING([--enable-double-precision],
        [Configure ODE to work with double precision, if not specified, single precision is used]
        ),
        precision=$enableval,precision=no)
AC_MSG_RESULT([$precision])
if test "$precision" = yes;
then
        ODE_PRECISION=-DdDOUBLE
else
        ODE_PRECISION=-DdSINGLE
fi

CPPFLAGS+=" $ODE_PRECISION"
AC_SUBST(ODE_PRECISION)


AC_MSG_CHECKING(if gyroscopic term should be used)
AC_ARG_ENABLE(gyroscopic, AC_HELP_STRING([--disable-gyroscopic],
[Configure ODE to work without gyroscopic term (may improve stability)]),
gyroscopic=$enableval,gyroscopic=yes)
AC_MSG_RESULT($gyroscopic)
if test x"$gyroscopic" = xyes
then
  AC_DEFINE(dGYROSCOPIC,,[Use gyroscopic terms])
fi



dnl Set some Platform Specific Variables
EXTRA_LIBTOOL_LDFLAGS=
case "$host_os" in
  cygwin* | mingw*)
    so_ext=".dll"
    DLLDEFINE="-DODE_DLL"    
    drawstuff="Win32" # if in a Windows enviroment
    EXTRA_LIBTOOL_LDFLAGS="-no-undefined"
    ;;
  *apple* | *darwin*) # For Mac OS X
    so_ext=".dylib"
    DLLDEFINE=""
    SHARED_LDFLAGS="-dynamiclib"
    drawstuff="OSX"
    dnl We need to use C++ compilation and linking for ode on Mac
    dnl Might as well do it for all code.
    CC="$CXX"
    LINK="$CXXLINK"
    ;;
  *)
   drawstuff="X11" # if anything else default to X11
    if test x$use_soname = xyes; then
      so_ext=".so.$ODE_RELEASE"
    else
      so_ext=".so"
    fi
    DLLDEFINE=""
    SHARED_LDFLAGS="-shared"
    ;;
esac
AC_SUBST(EXTRA_LIBTOOL_LDFLAGS)
dnl Set Conditionals
AM_CONDITIONAL(WIN32, test x$drawstuff = xWin32)
AM_CONDITIONAL(X11, test x$drawstuff = xX11)
AM_CONDITIONAL(OSX, test x$drawstuff = xOSX)
dnl Set Drawstuff variables
AC_MSG_CHECKING(which drawstuff lib to build)
AC_MSG_RESULT($drawstuff)
AC_SUBST(DRAWSTUFF)
dnl Set shared library variables
AC_MSG_CHECKING(for the suffix of shared libraries)
AC_MSG_RESULT($so_ext)
AC_DEFINE_UNQUOTED(SO_EXT,"$so_ext",[The extension for shared libraries.])
AC_SUBST(so_ext)
AC_SUBST(SHARED_LDFLAGS)


AC_PATH_XTRA


dnl Check for OpenGL
if test "x$drawstuff" = "xOSX"; then
  AC_DEFINE([HAVE_APPLE_OPENGL_FRAMEWORK], [1],
            [Use the Apple OpenGL framework.])
  GL_LIBS="-framework OpenGL -framework Carbon -framework AGL"
else
  AC_CHECK_HEADERS(GL/gl.h GL/glu.h GL/glext.h,,
        [enable_demos=no],
       [[#if HAVE_GL_GL_H
         #include <GL/gl.h>
         #endif
  	   #if HAVE_GL_GLU_H
         #include <GL/glu.h>
         #endif
       ]])
  have_gl=no
  have_glu=no
  TEMP_LDFLAGS="$LDFLAGS"
  AC_CHECK_LIB(GL, main,[GL_LIBS="$GL_LIBS -lGL"],have_gl=yes)
  AC_CHECK_LIB(GLU, main,[GL_LIBS="$GL_LIBS -lGLU"],have_glu=yes)
  AC_CHECK_LIB(opengl32, main,[GL_LIBS="$GL_LIBS -lopengl32"],have_gl=yes)
  AC_CHECK_LIB(glu32, main,[GL_LIBS="$GL_LIBS -lglu32"],have_glu=yes)
  LDFLAGS="$TEMP_LDFLAGS"
  if test $have_gl = no -o $have_glu = no; then
    enable_demos=no
  fi
fi
AC_SUBST(GL_LIBS)


dnl stdc++ is required when linking C programs against ode
AC_CHECK_LIB(stdc++,main,[LIBSTDCXX="-lstdc++"],[LIBSTDCXX=])
AC_SUBST(LIBSTDCXX)
AC_CHECK_LIB(pthread,main,[LIBS="$LIBS -lpthread"])


dnl test if we will build demos
AM_CONDITIONAL(ENABLE_DEMOS, test x$enable_demos = xyes)

dnl Check For Bullet support
AC_ARG_WITH([bullet],[AC_HELP_STRING([--with-bullet[=PATH]],[Add Bullet Support])],
[
	bullet=yes
	AC_DEFINE(USE_BULLET,1,[Use Bullet])
	temp=`pwd`
	if test $withval != yes
	then
		cd "$withval"
		BULLET_SRC_PATH=`pwd`
		if test $BULLET_SRC_PATH = $temp
		then
			AC_MSG_ERROR([Bullet src path not found])
		fi
		cd "$temp"
	else
		cd "$srcdir"
		BULLET_SRC_PATH="`pwd`/Bullet/Source"
		cd "$temp"
		cd "$BULLET_SRC_PATH"
		if test `pwd` = $temp
		then
			AC_MSG_ERROR([Local Bullet Source path not found])
		fi		
		cd "$temp"
	fi
],
[
	bullet=no
	BULLET_SRC_PATH=""	
])
AM_CONDITIONAL(BULLET, test "$bullet" != no)
AC_SUBST(BULLET_SRC_PATH)

dnl Check for autoscan sugested functions
AC_CHECK_LIB(m, [main])
AC_CHECK_LIB(sunmath, [main])
AC_CHECK_FUNCS([floor memmove memset select sqrt sqrtf sinf cosf fabsf atan2f fmodf copysignf copysign snprintf vsnprintf gettimeofday isnan isnanf _isnan _isnanf __isnan __isnanf])
AC_FUNC_ALLOCA 
AC_FUNC_MALLOC
AC_FUNC_OBSTACK 
AC_FUNC_REALLOC
AC_FUNC_SELECT_ARGTYPES
AC_FUNC_VPRINTF

AC_MSG_CHECKING(if alloca should be emulated by malloc)
AC_ARG_ENABLE([malloc],
        [AC_HELP_STRING([--enable-malloc],[use malloc to emulate alloca (more portable but slower)])],
        usemalloc=$enableval,usemalloc=no)
if test "$usemalloc" != no
then
    AC_DEFINE(dUSE_MALLOC_FOR_ALLOCA)
    AC_MSG_RESULT($usemalloc)
else
    AC_MSG_RESULT(no)
fi


dnl include found system headers into config.h
AH_TOP([
#ifndef ODE_CONFIG_H
#define ODE_CONFIG_H
])
AH_BOTTOM([

#ifdef HAVE_ALLOCA_H
#include <alloca.h>
#endif
#ifdef HAVE_MALLOC_H
#include <malloc.h>
#endif
#ifdef HAVE_STDINT_H
#include <stdint.h>
#endif

/* an integer type that we can safely cast a pointer to and
 * from without loss of bits.
 */
typedef uintptr_t intP;


// Use the error-checking memory allocation system.  Because this system uses heap
//  (malloc) instead of stack (alloca), it is slower.  However, it allows you to
//  simulate larger scenes, as well as handle out-of-memory errors in a somewhat
//  graceful manner

#ifdef dUSE_MALLOC_FOR_ALLOCA
enum {
  d_MEMORY_OK = 0,              /* no memory errors */
  d_MEMORY_OUT_OF_MEMORY        /* malloc failed due to out of memory error */
};
#endif

#ifdef dSINGLE
       #define dEpsilon  FLT_EPSILON
#else
       #define dEpsilon  DBL_EPSILON
#endif


#endif /* #define ODE_CONFIG_H */
])


dnl Finally write our Makefiles
AC_OUTPUT([
 Makefile
 include/Makefile
 include/ode/Makefile
 include/drawstuff/Makefile
 ode/Makefile
 ode/src/Makefile
 drawstuff/Makefile
 drawstuff/src/Makefile
 drawstuff/dstest/Makefile
 ode/demo/Makefile
 OPCODE/Makefile
 OPCODE/Ice/Makefile
 GIMPACT/Makefile
 GIMPACT/include/Makefile
 GIMPACT/include/GIMPACT/Makefile
 GIMPACT/src/Makefile
 Bullet/Makefile
 ode-config
 ])

chmod +x ode-config

BUILDDIR=`pwd`

dnl Print some useful information
echo "Configuration:"
echo "  Build  system type:      $build"
echo "  Host   system type:      $host"
echo "  Use double precision:    $precision"
echo "  Use OPCODE:              $opcode"
echo "  Use GIMPACT:             $gimpact"
echo "  Use Bullet:              $bullet"
echo "  Use gyroscopic term:     $gyroscopic"
echo "  Is this a Pentium:       $pentium"
echo "  Is the CPU x86-64:       $cpu64"
echo "  Headers will be installed in $prefix/include/ode"
echo "  Libraries will be installed in $prefix/lib"
echo "  Building in directory    $BUILDDIR"
if test $bullet != no ; then
echo "  Building Bullet from     $BULLET_SRC_PATH"
fi
